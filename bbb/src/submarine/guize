fianl:
1.修饰变量不可被改变
2.修饰方法不可被重写
3.修饰类不可被继承
抽象方法：
1.由abstract声明
2.只有方法没有具体定义
3.包含抽象方法的类必须是抽象类
4.抽象类不能被实例化（是不完整的）不可以new
设计规则：
1.将派生类所有公共属性和行为，抽到超类中
2.若派生类的行为都一样，设计为普通方法
  若派生类的行为不一样，设计为抽象方法
抽象类的意义
1.具备超类的意义：
2.封装共有的属性和行为---代码复用
3.为所有派生类提供统一的类型--向上造型
4.可以包含抽象方法，为所有派生类提供同意的入口（可以点出），同时可以强制重写
5.接口需要被实现、继承的    实现类、派生类 ：必须重写所有的抽象方法

 接口
1.是一种引用类型
2.由interface定义
3.只能包含常量和抽象方法（默认访问权限是public）
4.接口不能被实例化
5.一个类可以实现多个接口，用逗号分隔，若有继承又有实现，先继承后实现
6.接口可以继承接口


interface Inters{
    public static final int MUN = 5;
    public abstract void show();
    int COUNT=5;//默认public static final
    void show1();//默认public abstract
    }
//实现接口
class doo extends bbb implements Inters,Inters2{
    public void show();//重写时必须写public
    public void show1();
}

向下转型
if(a instanceof A)
判断对象a是否是类A的实例化对象
